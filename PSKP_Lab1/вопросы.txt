1. интернет - всемирная сеть, построенная на протоколах tcp\ip
2. служба интернет - системы, предоставляющие некоторые услуги 
   (dns, www, ftp, telnet, smtp, pop3, imap, ...)
3. клиент-серверное приложение - состоит из клиента (фронт) и сервера (бек) которые
   общаются реквестами и респонсами
4. сетевой протокол - http
5. свойства протокола http - прикладной уровень, юзается в вебе для вз-ия клиента
   и сервера, 1.1 основная версия, но много сайтов перешли на http 2 (отличие: протокол
   бинарный, http 3.0 разрабатывается, работает поверх протокола похожего на udp)
   подразумевает клиентов и серверов (клиент - реквест - сервер), (сервер-респонс-клиент)
   не сохраняет состояния, каждый раз не сохраняет инфу о клиенте (фикс с пом. сессий)
   http - 80, https - 4043, rfc стандарт
6. инфа в хттп-запросе - метод (get, post, put, delete, copy, options, ..), uri, версия,
   заголовки (key\value с доп инфой о соединении, кеше, куки,..), параметры, тело
   заголовки - пустая строка - тело
7. инфа в хттп-ответе - версия, код состояния (100 - 500), пояснение к коду состояния,
   заголовки - пустая строка - тело
8. веб-приложение - клиент-серверное приложение, у которого клиент и сервер вз-ют по 
   протоколу http (не всегда,но в основном). состоит из фронта (клиента) и бека (сервер)
9. фронт - клиент, дизигн
   бек - сервер, бизнес-логика
10. кроссплатформерное приложение - способно работать на более чем одной аппаратной
    платформе. 2 способа: на уровне компилятора (c, c++) или на уровне среды
    (фреймворка) - jvm, .net clr, node.js - после компиляции получаем байт код (il)
    который запускается на виртуальной машине
11. схема веб-приложения - 
12. технологии разработки кп серверных приложений - php, jvm, asp.net core, 
    python (django), ruby (rails),  js (node.js)
13. асинхронная операция - поток не блочится, задачи отдаются на выполнение, 
    2 этапа: запрос и получение результата
14. принцип выполнения асинхронного запроса с помощью объекта XMLHTTPRequest и Fetch - 
15. назначение сервака node.js - 
16. свойства сервака Node.js - ориентирован на i/o операции (input/output) - не 
    связанные с вычислением (для них cpu). 


трабл: 
когда отправляется запрос на io операцию,
поток приложения заблочен. другой юзер не получит доступ пока не будет обработан
запрос предыдущего юзера. это блокирующие операции. 

2 подхода для решения проблемы блокирующих операций:
1. многопоточность (старый метод) - ограничение по кол-ву потоков и кол-ву памяти
2. паттерн reactor - был уже на nginx'е, решил проблему ограничения памяти для 
обработки параллельных запросов. приложение генерит ио операции, они передаются 
демультиплексору событий

многопоточность - разные несвязанные задачи в разных потоках. (НЕЛЬЗЯ РАЗДЕЛИТЬ ЗАДАЧУ)
конкурентность - одна задача, можно на одном ядре. постоянное переключение
с одной задачи на другую
паралеллизм - одна задача, которую мы разделяем, но нужны ресурсы. 
не всегда получется этим добиться увеличения скорости (закон амдала)
ассинхронность - поток не блокируется; некоторые задачи куда то отдаются,
по ее выполнению вызовится коллбэк-функция. две фазы: отправка заявки и получение
результата. можно юзать ассинхронность и многопоточность в любой комбинации.
когда процесс отдал запрос от продолжает чет делать
(синхронный запрос - поток блокируется до получения ответа)

закон амдала - задачу нельзя полностью распараллелить, если добавлять процессоры,
то рано или поздно от них не будет прироста

синхронный блокирубщий - дефолт
синхронный неблокирующий - постоянное переключение между контекстом приложения и
cpu, минус: ответ может прийти позже чем он нужен
асинхронный блокирующий - юзлесс, ибо асинхронность не используется. ио операция 
отправила запрос, возвращается управление приложения, ответ сразу приходит
асинхронный неблокирующий - юзается в ноде

кстати get идемпотентный, т.е. результат может меняться, но сост. сервера такое же
post неидемпотентный - для загрузки чего-то на сервер например, сост. сервера меняется
head похож на get
put похож на post, идемпотетный, ресурс меняется но не кардинально
delete идемп, удаляется ресурс
trace чисто для отслеживания добавляемой инфы